
==========
Marzo 2014
==========

.. contents:: Tabla de Contenido

6 de Marzo del 2014
-------------------

Reunión con Humberto, Katherine, José y Saul.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Estado que se aprobará
Nivel de aprobación
Persona que va a aprobar.

1. Un campo que debe tener asignado un empleado es Position. (Project Manager, Human Resources Manager, P&C Manager, Finance and Administration Manager, etc)

2. La Position a su vez, debe tener asociado un Authority Level. (L1 o L2)

3. Un empleado puede pertencer a un grupo especial Group. (MC, BOD, CC, u Officers)

4. Un documento (Requisition, Tender Plan, etc)  puede ser aprobado por un empleado con cierta Position, Authority Level o un Group. El documento tendrá un campo con un valor por dólares Amount. Dependiendo del Amount, el documento será aprobado o no por alguna de las entes.



Relacionar 1, 2 y 3.

Position (hr.job) tiene un campo Authority_Level.

Position (hr.job) está relacionado (many2one) con Group (hr.deparment) 

Un Documento (Requisition, Tender Plan, etc) tiene un many2many a un modelo nuevo llamémoslo   schedule.power.line

def _get_power_requisiton(...):
	“””
	retorna los ids de las personas con derecho de aprobar por defecto
	“””
	......
	# trasladar el modelo actual (purchase.requisition) a  los schedule.power.line creados
	......
	return ids

_model = “approval.line”
_columns = {
	state : selection('draft, ..., etc')
	power_ids: many2many('schedule.power.line', 'table_rel', 'requisition_id', 'document_id')
}
_default: {
	 'power_ids' : _get_power_requisiton
}

_name = 'hr.job'
_column = {
'auth_level' :selection([L1,L2,PM,MC,BOD])
*'department_id': m2o('hr.deparment')*
}

_model = “approval.line”
_columns = {
	'document_id' : id
	'model' : many2one('ir.model') 
	'group': many2one('hr.deparment')
	'rol': many2one('hr.job')
	'amount_min' : float
	'amount_max' : float 
	'approved': bool
} 

Manejar power_ids como many2many, con default power_ids que extrae los ids de un método en especial,
lo saque de /addons/project/project.py +281 y /addons/project/project.py +305
Te explico brevemente, los documentos pueden ser aprobados tanto por 1, 2 o 3. Y pienso que deben estar relacionados de cierta manera, estoy de acuerdo con el modelo de hr.job.

pero no estoy de acuerdo con:

_inherit='hr.employee'
_columns={
level_ids: m2m(hr.job) domain =[(auth_level=True)]
}

Pues ya empleado tiene relación con hr.job  que contiene la información del  Authority_Level y  Group al que pertenece, y el hr.job en sí, ya sería la Position (campo name).

Creo que nos podríamos ahorrar schedule.power si vemos como funciona el modelo project.task.type.

No sé si es un poco descabellado ando medio dormida, pero quisiera saber tu opinión, lo que me gustaría es tratar de crear lo menos posible modelos nuevos, aunque nos lleve un poquito mas de tiempo leer e investigar como funcionan los demás. Creo yo, para no cometer los errores que cometimos en cluster.

7 de Marzo del 2014
-------------------

Leer documentación CICSA:
~~~~~~~~~~~~~~~~~~~~~~~~~

Leer el manual de contrato
Leer el libro de delegación de poder
Revisar correos de rafa de cicsa
Revisar documentos de cicsa https://drive.google.com/a/vauxoo.com/#folders/0B6iJAVelZw_IeE9OWXM3dkhtSUk

Leer documentación scrum:
~~~~~~~~~~~~~~~~~~~~~~~~~
http://www.gazafatonarioit.com/2014/03/algunas-notas-sobre-gestion-del.html

Aplicaciones a usar en el navegador:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
https://drive.draw.io/

- Draw.io
- Mindmeister

Branch de CICSA:
~~~~~~~~~~~~~~~~
https://code.launchpad.net/~cicsa-ve-team/cicsa-ve/trunk

Manual de contrato
~~~~~~~~~~~~~~~~~~

El propósito de este Manual es establecer los principios y las directrices para 
regular la ejecución de las actividades de licitación de Carabobo 
INGENIERIA Y CONSTRUCCIONES, SA (CICSA) para la compra de 
de bienes y contratación de servicios para la construcción de instalaciones de producción 
y la construcción de instalaciones XHO Upgrader asociados a este proyecto.


14 de Marzo del 2014
--------------------


Crear prueba de concepto para ver HU cargadas en una instancia vauxoo desde mi dominio
yanina@yanina.openerp.la

mimaquina$ scp base_de_datos/vauxoo-2013-11-18.sql yanina@yanina.openerp.la:~/open7/

yanina@testvauxoo$ createdb -O yanina -T template0 -E UTF8 poc_script_hu
yanina@testvauxoo$ psql -d poc_script_hu -f open7/vauxoo-2013-11-18.sql -U yanina

yanina@testvauxoo$ python hu.py --db poc_script_hu --user administrador --pass administrador --port 20000


17 de marzo 2014
----------------

acc_obj._browse_class.__dict__.get('__osv__')

Consultar columnas de un modelo.


19 de Marzo del 2014
--------------------

Sobre el script de HU
~~~~~~~~~~~~~~~~~~~~~

Se termino el script para la carga de HU
https://code.launchpad.net/~vauxoo-private/vauxoo-private/script_hu_cicsa-dev-yani

Se creo una instancia en yanina@yanina.openerp.la en el puerto 20000
con base de datos llamada poc_script_hu.

Se utilizó el sql del 17 de marzo del 2014 de vauxoo, se puede acceder a los respaldos en

usuario: downloads
host: backup.vauxoo.com

Se llevaron a cabo los siguentes pasos en la instancia de prueba.



Sobre csv_tools o csv2xml
~~~~~~~~~~~~~~~~~~~~~~~~~

Kathy me comento que:

te cuento que el branch/serie que dijo Gaby ya le emrge el primer branch el csv_tools 
que es el modulo grafico openerp para la herramienta csv2xml

Hola @Yani. Esos csv lo puedes agregar al branch 
https://code.launchpad.net/~vauxoo-private/vauxoo-private/csv2xml

25 de Marzo del 2014
====================

Con respecto a los csv
----------------------

https://code.launchpad.net/~vauxoo-private/vauxoo-private/csv2xml

1. Para crear la carpeta que contenga el esqueleto de los archivos csv de la empresa usaremos el comando create de la siguiente manera:

$csv2xml create /home/.../csv_mycompany

Donde csv_mycompany es la carpeta con el esqueleto de los archivos csv.

2. Luego de crear la carpeta con los archivos csv (vacíos por ahora), podrás editarlos libremente con data real de la compañía.

3. Después de llenar los csv con los datos de la compañia, queremos crear los xml, por lo cual necesitamos la ruta del módulo donde se tendrán toda la data xml de la compañía, para nuestro ejemplo usaremos /home/.../mycompany_xml_data_module

Entonces usaremos el comando

$csv2xml update /home/.../mycompany_xml_data_module /home/.../csv_mycompany

NOTA IMPORTANTE: dentro del módulo  /home/.../mycompany_xml_data_module ya debe estar creada la carpeta data.


Cambios para historias de usuario
---------------------------------

- Cambiar el envio de emails al user_story
- Quita de la vista en lista del criterio de aceptación el campo development y difficulty
- Esa plantilla esta en el modulo expired_task_information/ en los addons-vauxoo. Agregar
  plantilla a correos de user_story


Problema Attribute Error al consultar un campo de un objetos de User Story
--------------------------------------------------------------------------

Cuando se obtenia un objeto de user.story por medio de browse, y se intenta hacer un 
hu_obj.name, ocurría un error. Attributte Error currency_id.

Se hizo un pdb y se descubrió que, en el modelo se hacía un inherits a otros modelos, entre
los cuales estaba el campo funcional de currency_id.

Entonces, al hacer un hu_obj.read(), se pudo observar que el campo many2one a uno de los modelos
que se tenía como inherits, era de Valor False, por lo tanto se concluyó que, como el campo
era False, y al trata de consultar currency_id, entonces ocuarria el error. Parece ser un bug de 
OpenERP, es decir, se hacía algo como False.currency_id.

Al final, se eliminaron las herencias porque no se necesitaban, y se resolvió el problema.


Pruebas unitarias para Openerp con OE, Reglas de Vauxoo Valencia
----------------------------------------------------------------

docstest lo usa oerplib.
unittest2 lo usa oe.
robotframe es un framwework para pruebas de ATDD.

1) Pylint
2) A/TDD
3) Vim

Inherits
--------

Cuando se hace un inherits en openerp, lo que se hace es que el modelo que hace el inherits, agrega
los campos a su tabla del modelo heredado. Pero "agregar columnas a su tabla" es algo imaginario,
puesto que si te vas a la tabla en postgres, esto no es verdad, sin embargo, lo bueno de esto, 
es que puedes mostrar esos campos en la vista como si fueran propios del modelo.

26 de Marzo del 2014
====================

Cosas por hacer
---------------

- Tarea 1184, sobre mejoras en user story.
- Permisos , tarea 811


