
Creando vista para el workflow de CICSA
---------------------------------------

Cosas por hacer
~~~~~~~~~~~~~~~

DONE revisar campos en order_lines (taxes) que aun se puede editar.
DONE cuando se editan mas de dos líneas ocurre un error.
DONE pedirle a jose que haga merge en cicsa
Considerar si un purchase order line tiene varios stock moves.

DONE hacer prueba de concepto de la transición del workflow.
DONE Colocas el nullauthorize cuando se desapruebe un documento.
estudiar campos que deben ser solo lectura o debe verse al hace las transciciones en el workflow.
cambiar nombre de módulo purchase_requisition_workflow a cicsa_purchase_requisition_workflow.
revisar coigo unittest de kathy
Cambiar los write a los action de los nodos.
colocar los write en los action
corregir comite

revisar documentación de kathy y de saul

Aplicar pylint al código

Tarea 1317
~~~~~~~~~~

res = self.authorize(cr, uid, ids, context=context)
if not res:
    return False
res = self.ask_authorization(cr, uid, ids, context=context)
if not res.get('auth_ok'):
    return False

- En el proceso de revisión de la lista de proveedor, se tienen dos botones que envía a PCB o 
  a la actualización de la lista, directamente a CICSA, que pasaría si uno de los involucrados
  hace click en submit to pCB y el otro hace click en el boton de submit to cicsa?

  Debería existe algún campo check que permita poder decididr antes, que botón se deberá mostrar?
  para evitar problemas futuros?

- Arreglar error ortografi comitte por committee

- agregar self.nullauthorize cuando se haga click en el boton de desaprobar.
- Averiguar el metodo discard, metodo

Tarea 1336
~~~~~~~~~~

**Documentacion**

Documentar que al usar éste modulo de purchase_order_change_management.
Se deba tneer cuidado

**DONE**
-e) Agregar super a metodo write de purchase.order para que cuando llegue a estado 'approved' cambie a la fecha de hoy (30 min)
    Ya existe un campo y se llama date_approve que se modifica en el metodo wkf_approve_order.
    Solo es visible si el usuario tiene permisos de technical features.

-d) Agregar campo last_update al la vista _form_ del modelo purchase.order (30 min) 
-c) Agregar campo last_update tipo fecha al modelo purchase.order (30 min)
-b) Agregar campo version al modelo purchase.order tipo integer (30 min)
-a) Agregar campo version a vista _form_ del del modelo purchase.order (30 min)
a) modificar workflow de modelo purchase.order: agregar conjunto [picking] ---transición----> (router_2): en este proceso la transicion entre los dos se dispara con un botón "Modificar Orden de Compra", / Escribir transicion / escribir nodo router_2  (60 min)
b) Agregar Boton tipo workflow a la vista _form_ con string "Modificar Orden de Compra" solo visible cuando la purchase.order su estado sea "approved" (30 min)
c) Modificar workflow de modelo purchase.order: agregar conjunto (router_2) ---transición ---validar-cancelación-total---> (cancel) se incrementa en uno el campo de versiones. (120 min)
d) Modificar workflow de modelo purchase.order: agregar conjunto (router_2) ---transición ---validar-cancelación-parcial---> (cancel_2) (120 min)
e) Modificar workflow de modelo purchase.order: agregar conjunto (cancel_2) ---transición ---buton-devolver-me-arrepiento---> [picking]. Esto es llevar a la purchase.order a su estado "approved" nuevamente (120 min)

f) Agregar Boton tipo workflow a la vista _form_ con string "Devolver a Estado Normal" solo visible cuando la purchase.order su estado sea "cancel_2" (30 min)
j) Agregar Boton tipo workflow a la vista _form_ con string "Aprobar Modificación" solo visible cuando la purchase.order su estado sea "new_draft" (30 min)
h) Agregar super a método write() de purchase.order  y purchase.order.line para:
h.1.- si una linea de purchase.order es nueva se realiza el cambio y se escribe en el log, si se modifica posteriormente, no realizar alertas. (120 min)
h.2.- si una línea de purchase.order se está modificando:
h.2.a.- si el valor que nuevo es mayor a la cantidad recibida, realizar el cambio, escribirlo en log, y continuar (120 min)
h.2.b.- si el valor nuevo es menor que la cantidad recibida, dejar valor anterior silenciosamente y escribir en el log que el cambio no se pudo realizar, (120 min)
h.3.- si una línea de puchase.order se está eliminando
+h.3.a.- y se han recibido mercancía, no ejecutar la eliminación silenciosamente, escribirlo en log diciendo que el cambio no se realizó por dicha razon, y dejar el valor original (120 min)
+h.3.b.- y no se recibió mercancía, ejecutar la eliminación y escribirlo en el log (120 min)
i) Modificar workflow de modelo purchase.order: agregar conjunto (new_draft) ---transición ---buton-aprobar-modificación---> [picking]. 
-i.1.-Esto es llevar a la purchase.order a su estado "approved" nuevamente de manera forzada, pues [picking] no volverá a ejecutar su método, (240 min)
-i.2.- Habiendo hecho la consolidación del picking considerando:
+i.2.a.- eliminar / o anular lineas que ya se consideren totalmente recibidas del picking que aún tiene estos elementos por recibir (240 min) 
+i.2.b.- consolidar lineas que no se han realizado en un picking en estado por recibir (240 min)
+i.2.c.- si el picking se queda con cero elementos entonces realizar trigger para finalización del workflow. (180 min).
k) Revisión funcional y entrega a usuario (80min)
l) Documentación del proceso de Modificación de una Orden de Compra Aprobada (240 min)


CICSA
-----

Leer las historias de usuario, ir criterio por criterio e ir explicando el módulo

Se debe crear una instancia de prueba con los usuarios y autoridades de cada uno.

Montar instancia de prueba en servidor de producción 
de CICSA (Pedirle a Tulio), agregar branch de lp:cicsa

La documentación debe estar perfecta para poder generar pruebas reales

Los usuarios ya deben estar creados antes de empezar a 
explicar a los usuarios de CICSA.

Llevar carpeta negra de HU.

Preparar guión para DJ y para los usuarios de CICSA

Evaluar idea de videos en vez de documentos.

¿qué? ¿para qué? (Realizar antes del desarrollo)
¿cómo? (Videos, comenzando cada video ir a las H.U y recorrer los criterios de aceptación e ir
mostrando como funciona en OpenERP)

Entregar documentación cuando se expliquen las funcionalidad.

¿Se podrá coloca la documentación en github?

Historias de usuario: 92, 95 y 104

Diálogo con DJ
--------------



