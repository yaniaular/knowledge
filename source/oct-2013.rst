============
Octubre 2013
============

.. contents:: Tabla de Contenido

.. 01 de Octubre del 2013 - 5:00 p.m
.. ---------------------------------
.. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. Problemas solventados en el día
.. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. ~~~~~~~~~~~~~~~
.. Resumen del día
.. ~~~~~~~~~~~~~~~
.. ~~~~~~~~~~~~~~~~~~
.. Servers ejecutados
.. ~~~~~~~~~~~~~~~~~~
.. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. Problemas que se presentaron
.. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. trabajamos en delivery el 30 de sep, 1 de octubre y 2 de octubre

08 de Octubre del 2013 - 5:00 p.m
---------------------------------

~~~~~~~~~~~~~~~
Resumen del día
~~~~~~~~~~~~~~~

Se eliminó el branch de ``product_dimensions`` porque ya se hizo una propuesta para eso.

**Se están trabajando en los siguientes branches:**
- https://code.launchpad.net/~vauxoo-private/vauxoo-private/7.0-dev-fleet_shipment-kty
- https://code.launchpad.net/~vauxoo/addons-vauxoo/7.0-product_volumetric-dev-yani
- https://code.launchpad.net/~vauxoo-private/vauxoo-private/fleet_delivery
- https://code.launchpad.net/~vauxoo/addons-vauxoo/7.0-pos_delivery_restaurant-dev-yani

**Se le delegará a Eduardo (Tareas lampara):** carga de data de javascript
- https://code.launchpad.net/~vauxoo/addons-vauxoo/7.0-pos_product_filter-dev-yani

**Se va a proponer en https://launchpad.net/openerp-product-attributes:**
- https://code.launchpad.net/~vauxoo/addons-vauxoo/7.0-product_volumetric_weight-dev-yani

**Merges pendiente:** Esto tiene que ver con el campo selection (delivery or restaurant) del modelo
pos.config.
- https://code.launchpad.net/~vauxoo/addons-vauxoo/7.0-pos_delivery_restaurant-dev-yani/+merge/189952

Se tomó el día para organizar los sprints en la instancia de https://erp.vauxoo.com se crearon
varias historias de usuario y además los criterios de aceptación juntos con las tareas, se cargaron
las horas de ayer Lunes.


07 de Octubre del 2013 - 5:00 p.m
---------------------------------
~~~~~~~~~~~~~~~
Resumen del día
~~~~~~~~~~~~~~~

Se comienza a trabajar con Katherine con flete, se quiere hacer el cálculo volumétrico con tres
campos, altura, anchura, largo. Empezamos con el módulo fleet_shipment que trata los embarques y
fleet_delivery que modifica el model fleet.vehicle para agregar el campo de capacidad volumétrica.

Humberto descubrió que había una propuesta en https://launchpad.net/openerp-product-attributes
donde un tipo había propuesto un modelo con dichos campos, pero lo rechazaron porque supuestamente
ya había otro modulo que los tenía, sin embargo, ese módulo, tiene otras cosas mezcladas de stock,
y no es conveniente. Ya que esos campos se necesitan en un solo mdulo para poder usarlos en otros
procesos.

https://code.launchpad.net/~sebastien.beau/openerp-product-attributes/openerp-product-attributes-product-dimension/+merge/171181


04 de Octubre del 2013 - 5:00 p.m
---------------------------------
~~~~~~~~~~~~~~~
Resumen del día
~~~~~~~~~~~~~~~

clases con Nhomar a las 9:00 a.m

se habló con Humberto para que se dedicarán 12 horas semanales a código entregable, no perder
tiempo investigando o aprendiendo javascript ya que cluster compro solo 100 horas para 
el sprint de delivery.


Se termina la tarea 141, se dejo la parte de POS a eduardo, el branch es 
https://code.launchpad.net/~vauxoo/addons-vauxoo/7.0-delivery_restaurant-dev-yani


Se hablo con Oscar, hizo un módulo de control de vehículos a los empleados, se debe crear
un branch a parte para poder agregar los modelos de unidad de transporte, embarque y pedidos
de los clientes. El módulo de oscar es 
https://code.launchpad.net/~vauxoo-private/vauxoo-private/fleet_papiao

Se empieza con las tareas de flete: 144, 143, 142, 130 y 139.

**Ver cursos:**

https://docs.google.com/a/vauxoo.com/document/d/17YpvSBSOreOMeIIPYXsZwHdT9TXReL9k0lA1sZO25pU/edit

prendiendo JavaScript, CSS, Jquery, Bootstrap, API OpenERP.


1) JavaScript:
2)  CSS:
3) Jquery:
4) Ajax: 
5) BackboneJS. 
7) Twiter Bootstraap
http://bootsnipp.com/ (Recursos)
8) Video de curso de nhomar en Belgica: Aun no público.
n+1) Documentacion sobre la nueva API de OpenERP. [Como Referencia.]
https://doc.openerp.com/trunk/web/qweb/
https://doc.openerp.com/trunk/web/async/
https://doc.openerp.com/trunk/web/rpc/
https://doc.openerp.com/trunk/web/widget/   
https://doc.openerp.com/trunk/web/module/

Fase 2:
1) Google Apps (Para reportes con JavaScript en google Docs.)
2.- Adicional: Less (Linkear aquí)

trabajo de Nhomar:
https://code.launchpad.net/~vauxoo/web-addons/7.0-web_hideleftmenu


**Configuracion de conexion VPN:**


Buenas Tardes,

    A continuación adjunto los certificados que me pediste que creara para el acceso de los 
chicos de Vauxoo  a la VPN. Las instancias se encuentran disponibles en las 
siguientes direcciones:
         
        10.8.0.1:10069 (Desarrollo)
        10.8.0.1:11069 (Pruebas)
        10.8.0.14: 9069 (Projecto)

La dirección del servidor VPN es:

        clusterbrands.dyndns.org:1194

Nota: La tecnologia usada para configurar la VPN es OpenVPN. 

HBTO dice:

crea una carpeta "ovpn"
y dentro pon estos archivos,
desempaca el tar.gz

y luego con sudo ejecuta el .sh

sudo sh cnx.sh

$mv fwdcertificadosvauxoo ovpn
$cd ovpn/
$ls
- cnx.sh  config.conf  yaninaaular.tar.gz
$tar -xvf yaninaaular.tar.gz
- ca.crt  cnx.sh  config.conf  yaninaaular.crt  yaninaaular.key  yaninaaular.tar.gz
$sudo sh cnx.sh

conectar a http://10.8.0.14:9069/

03 de Octubre del 2013 - 5:00 p.m
---------------------------------
~~~~~~~~~~~~~~~
Resumen del día
~~~~~~~~~~~~~~~

02 de Octubre del 2013 - 5:00 p.m
---------------------------------
~~~~~~~~~~~~~~~
Resumen del día
~~~~~~~~~~~~~~~

#) Módulo delivery_restaurant de los addons-vauxoo (tarea de cluster 141):

- Agregando los campos que necesito para hacer el filtrado. 

Se pide un filtro en el punto de venta que dependiendo del tipo de caja  (en el modelo pos.config 
existe un campo "deli_rest" que determina si la caja es para restaurante o delivery) se muestren  
los  productos que le corresponde, ya que los productos tienen dos campos booleanos (restaurant y 
delivery) que determinan si el producto se mostrara en cajas de delivery y/o restaurante.

Para ésto, se tuvo que heredar de la clase PosModel en el archivo models.js de punto de venta, 
donde se establece la data que se manejará en las funciones javascript, los campos  que se 
necesitaron de producto son "restaurant y delivery" y el campo del punto de venta 
(modelo pos.config)  "deli_rest".

``delivery_restaurant/__openerp__.py``
``Última modificación: 02/10/13 07:57, Estado: modificado, Tipo: archivo``

        ],
    'demo': [],
    'test': [],
    'js': [
        'static/src/js/backbone-super-min.js',
        'static/src/js/main.js',
        'static/src/js/models.js',
        ],
    'active': False,
    'installable': True,
}


``delivery_restaurant/static/src/js/main.js``
``Última modificación: 02/10/13 07:57, Estado: añadido, Tipo: archivo``

openerp.delivery_restaurant = function(instance){
    var module = instance.point_of_sale;
    delivery_restaurant_models(instance,module);
    instance.delivery_restaurant = module;
}


``delivery_restaurant/static/src/js/models.js``
``Última modificación: 02/10/13 07:42, Estado: añadido, Tipo: archivo``

function delivery_restaurant_models(instance, module){

    module.PosModel = module.PosModel.extend({
        initialize : function(session, attributes) {
            this._super(session, attributes);
        },
        
        load_server_data : function(){
            self = this;
            loaded = this._super()
                .then(function(){
                    return self.fetch(
                    'pos.config',
                    ['deli_rest'],
                    [['id','=', 
                    self.get('pos_session').config_id[0]]]
                    );
                }).then(function(){
                    return self.fetch(
                        'product.product', 
                        ['restaurant' , 'delivery'],
                        [['sale_ok','=',true],['available_in_pos','=',true]]
                        
                        );
                });
            return loaded;
        },

    })

}

.. note::
    Se debe tener en la carpeta js la librería backbone-super-min.js

#) 

01 de Octubre del 2013 - 5:00 p.m
---------------------------------
~~~~~~~~~~~~~~~
Resumen del día
~~~~~~~~~~~~~~~
#)
Ver como funciona el pos para poder hacer el filtrado de los productos
10:00 
2 horas

#)

Hoy aprendí sobre la herencia delegada, como por ejemplo en el módulo de product/product.py líne
536, en donde podemos observar que el modelo de product tiene una herencia delegada:  _inherits =
{'product.template': 'product_tmpl_id'}, y tiene product_tmpl_id como campo many2one a la clase de
product.template. En la tabla de product.product se pueden crear distintas formas de empaquetar a
un producto como por ejemplo por paleta, caja, paquete, etc. Pero a pesar de que se empaquetan de
manera distinta, de que tienen ean  distinto, entre otras cosas, comparten una información en común
y esa la encontraremos en el modulo de produtc.template, y de esa manera de evita repetir tanta
información.

#)

De modo que se agrego información al modulo product.product con dos booleanos por medio del nuevo
module delivery_restaurant, para saber si el producto se mostrará en el restaurant y/o en el
delivery. Tuve que hacer una consulta sql para poder agregar valores aleatorios a los registro yas
existentes:

    - update product_product set restaurant=true where id in (select id from product_product order by
    random() limit 100);
    - update product_product set delivery=true where id in (select id from product_product order by
      random() limit 100);

Esto hace que en la tabla product_product se modifique el campo restaurant o delivery a verdadero
en donde el id sea igual a los registros seleccionados aleatoriamente en la consulta despues de la
clausula IN.

#)

En el punto de venta estuve viendo como funciona la parte de ajvascript, y en el archivo models.js
línea 174, agregue los campos nuevos delivery y restaurant, para poder consultarlos luego en el
archivo widgets.js línea 576 

_.each(products, function(prod){                                                                                                    
     console.log(prod.name + "@@" +prod.restaurant);                                     
    }                                                                                   
); 

esta _.each función de underscore.js hace que a cada elemento de products lo reciba la función e imprima
la info que se desee.

~~~~~~~~~~~~~~~~~~
Servers ejecutados
~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Problemas que se presentaron
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
